#! __BASH__
#
# Copyright 2009-2016 Víctor M. Sánchez-Cartagena, Felipe Sánchez-Martínez, Universitat d'Alacant
#
# This file is part of ruLearn.
# ruLearn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ruLearn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with ruLearn.  If not, see <http://www.gnu.org/licenses/>.
#

MYFULLPATH=`readlink -f $0`
CURDIR=`dirname $MYFULLPATH`

PYTHONLIBDIR="__PYTHONLIBDIR__"

#shflags
. __LIBDIR__/shflags

DEFINE_string 'source_language' 'es' 'source language code (mandatory)' 's'
DEFINE_string 'target_language' 'ca' 'target language code (mandatory)' 't'
DEFINE_string 'corpus' '' 'Prefix of files containing the training parallel corpus (suffixes are .SL and .TL; mandatory)' 'c'
#giza is now shipped with this package
#DEFINE_string 'giza_dir' '~/giza-pp/GIZA++-v2' 'Giza++ directory' 'g'
DEFINE_string 'config' '' 'Linguistic configuration file (mandatory)' 'g'
DEFINE_string 'data_dir' '' 'Directory where the source and compiled Apertium dictionaries can be found (default: __APERTIUMPREFIX__/share/apertium/apertium-SL-TL/)' 'd'
#DEFINE_string 'apertium_prefix' '' 'Prefix where Apertium was installed (default: /usr/local/)' 'u'
######################
# (optional)
# Temporary directory where all the the files will be stored
# If not set, the script will create a new temporary directory under /tmp
######################
DEFINE_string 'work_dir' '' 'Directory where all the results will be written (mandatory)' 'm'
#DEFINE_boolean 'segment_by_marker' 'false' 'Segment SL corpus according to marker hypothesis' 'y'
DEFINE_string 'filtering_thresholds' '0 0.05 1' 'Thresholds for filtering alignment templates. Format is start step end, as in the seq command. A single threshold can also be defined' 'f'
DEFINE_string 'theta_threshold' '2' 'Number of bilingual phrases a GAT must reproduce in order not to be discarded. We reccommend using the default value' 'w'
DEFINE_string 'test_corpus' '' 'Evaluation corpus prefix (suffixes are .SL and .TL). If an evaluation corpus is provided, the resulting rules will be evaluated against this corpus.' 'e'
DEFINE_string 'dev_corpus' '' 'Development corpus prefix (suffixes are .SL and .TL). It is used to choose the most appropriate threshold. If a development corus is not provided with this option, the flag --discard_a_fifth_of_corpus should be enabled.' 'v'
#DEFINE_boolean 'transfer_tools_1' 'false' 'Use transfer tools 1.0' 'o'
#DEFINE_boolean 'only_extract_bilingual_phrases' 'false' 'only extract bilingual phrases' 'x'

DEFINE_string 'corpus_head_size' '' 'Size (in lines) of the prefix of the training corpus to use. If this option is not set, the whole corpus will be used.' 'a'
#DEFINE_boolean 'use_fixed_dictionary' 'false' 'use fixed bilingual dictionary' 'l'
DEFINE_boolean 'alignments_with_lemmas' 'false' 'Use only lemmas to learn alignment models and obtain Viterbi alignment' 'p'
DEFINE_boolean 'alignments_with_bildic' 'false' 'Add bilingual dictionary to corpus for obtaining word alignments. This option is likely to increase quality of the obtained rules.' 'j'
DEFINE_boolean 'discard_a_fifth_of_corpus' 'false' 'Discard a fifth part of the training corpus and use it as development corpus.' 'b'
DEFINE_boolean 'only_lexical_generalisation' 'false' 'Dont generalise among unseen linguistic features. Enabling this option will significantly speed up the inference process. Enable it if your parallel corpus contains more than 5000 words.' 'q'
DEFINE_string 'override_bin_bil_dir' '' 'Use this file as L1-L2 compiled bilingual dictionary' 'B'
DEFINE_string 'override_bin_bil_inv' '' 'Use this file as L2-L1 compiled bilingual dictionary' 'C'
DEFINE_string 'override_mono_dix_l1' '' 'Use this file as L1 monolingual dictionary. Enable this option if you get an error message stating that the source language monolingual dictionary canot be found.' 'Y'
DEFINE_string 'override_mono_dix_l2' '' 'Use this file as L2 monolingual dictionary. Enable this option if you get an error message stating that the target language monolingual dictionary canot be found.' 'Z'

DEFINE_boolean 'bibtex' false 'Print BibTeX entries of the main publications related to this software package' 'X'

#Advanced features
#DEFINE_boolean 'rule_based_post_editing' false 'RBPE mode. Translated from source to source language. target language is used to decide Apertium pair. No restrictions' 'E'
DEFINE_string 'max_beam_search_corpus_size' '' 'Maximum number of sentences allowed for beam search. Empty means unlimited' 'M'
DEFINE_boolean 'inverse_apertium_pair' false 'Apertium pair is TL-SL' 'I'
#DEFINE_boolean 'force_rerun' false 'Run Makefile for phrase extraction even though directory exists' 'F'
DEFINE_boolean 'corpus_is_already_analysed' 'false' 'corpus is already analysed' 'n'
DEFINE_string 'inverse_analysed_corpus' '' 'inverse analysed corpus file' 'i'
#DEFINE_boolean 'zens_extraction' 'false' 'use Zens algorithm to extract bilingual phrases' 'z'
#DEFINE_boolean 'disable_struct_edges' 'false' 'disable struct edges when phrase extraction (deprecated)' 'u'
DEFINE_string 'variant' '' 'variant' 'r'
DEFINE_string 'extremes_variant' 'ends_aligned' 'extremes variant' 'k'
DEFINE_string 'punctuation_variant' '' 'punctuation variant' 'P'

#process parameters
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

if [ "${FLAGS_bibtex}" == "${FLAGS_TRUE}" ]; then
  echo '@article{SanchezCartagena201546,
title = "A generalised alignment template formalism and its application to the inference of shallow-transfer machine translation rules from scarce bilingual corpora ",
journal = "Computer Speech & Language ",
volume = "32",
number = "1",
pages = "46 - 90",
year = "2015",
note = "Hybrid Machine Translation: integration of linguistics and statistics ",
issn = "0885-2308",
doi = "http://dx.doi.org/10.1016/j.csl.2014.10.003",
url = "http://www.sciencedirect.com/science/article/pii/S0885230814001028",
author = "Víctor M. Sánchez-Cartagena and Juan Antonio Pérez-Ortiz and Felipe Sánchez-Martínez",
keywords = "Machine translation",
keywords = "Transfer rule inference",
keywords = "Hybrid machine translation "
}
'
	exit 0
fi

VARIANT=${FLAGS_variant}
EXTREMESVARIANT=${FLAGS_extremes_variant}
PUNCTVARIANT=${FLAGS_punctuation_variant}

#variants info:
    # variant:
    #    - "": compatible with bildic as in paper
    #    - "allowincompwithbildic" : do not check bildic compatibility
    #
    # extremes_variant:
    #    - "ends_aligned"
    #    - "all"
    #
    # punctuation_variant:
    #	- "" : remove punctuation
    #	- "allowpunctuation": keep punctuation


if [ "${FLAGS_work_dir}" == "" ]; then
	MYTMPDIR=`mktemp -d`
else
	MYTMPDIR=${FLAGS_work_dir}
	mkdir -p $MYTMPDIR
fi

MAX_LENGTH=5

SL=${FLAGS_source_language}
TL=${FLAGS_target_language}
PAIR="${SL}-${TL}"
APERTIUMPAIR="$PAIR"

if [  "${FLAGS_inverse_apertium_pair}" == "${FLAGS_TRUE}" ] ; then
	APERTIUMPAIR="${TL}-${SL}"
fi



CORPUS=${FLAGS_corpus}
CORPUS_INVERSE=${FLAGS_inverse_analysed_corpus}
#GIZADIR=${FLAGS_giza_dir}
GIZADIR="$CURDIR"

THETA=${FLAGS_theta_threshold}

HEADCOMMAND="cat -"
if [ "${FLAGS_corpus_head_size}" != "" -a "${FLAGS_corpus_head_size}" != "all" ]; then
  HEADCOMMAND="head -n ${FLAGS_corpus_head_size}"
fi

STRUCTMAKVAR="PAR_SAME_STRUCTURE=yes"
if [ "${FLAGS_disable_struct_edges}" == "${FLAGS_TRUE}" ]; then
  STRUCTMAKVAR=""
fi

CORPUSANALYSEDMAKVAR=""
if [ "${FLAGS_corpus_is_already_analysed}" == "${FLAGS_TRUE}" ]; then
  CORPUSANALYSEDMAKVAR="PAR_PROVIDED_ANALYSED_CORPUS=yes"
fi

LEMMATIZEDMAKVAR=""
if [ "${FLAGS_alignments_with_lemmas}" == "${FLAGS_TRUE}" ]; then
  LEMMATIZEDMAKVAR="PAR_GIZA_LEMMA=yes"
fi

ZENSMAKVAR=""
#if [ "${FLAGS_zens_extraction}" == "${FLAGS_TRUE}" ]; then
#  ZENSMAKVAR="PAR_EXTRACTION_ZENS=yes"
#fi

if [ "${FLAGS_data_dir}" == "" ]; then
  DATADIR="__APERTIUMPREFIX__/share/apertium/apertium-$APERTIUMPAIR/"
else
  DATADIR="${FLAGS_data_dir}"
fi

if [ ! -d "$DATADIR" ]; then
	echo "ERROR: Data dir not found. Please specify the directory where the source code of the Apertium language pair can be found with the --data_dir flag." >&2
	exit 1
fi

#APERTIUMPREFIX=${FLAGS_apertium_prefix}
#Now managed by autoconf
APERTIUMPREFIX=__APERTIUMPREFIX__

FIXEDDICTMAKVAR=""
#if [ "${FLAGS_use_fixed_dictionary}" == "${FLAGS_TRUE}" ]; then
#  FIXEDDICTMAKVAR="PAR_FIXED_DICT=yes"
#fi

ONLYLEXGENFLAG=""
if [ "${FLAGS_only_lexical_generalisation}" == "${FLAGS_TRUE}" ]; then
	ONLYLEXGENFLAG="-7"
fi

CANDIDATE2=""
BILDIXFORALIGNMAKVAR=""
BILDIXMAKVAR=""

#TODO: find dictionary in the other direction/use reverse flag; don't do anything if we
#are not using bildix for alignment
if [ "${FLAGS_alignments_with_bildic}" == "${FLAGS_TRUE}" ]; then
	BILDIXFORALIGNMAKVAR="PAR_BILDIXFORALIGN=yes"
fi
  #try to find bilingual dictionary .dix file
  CANDIDATE1="$DATADIR/.deps/$APERTIUMPAIR.dix"
  if [ -f "$CANDIDATE1" ]; then
	BILDIXMAKVAR="PAR_BILDIX=$CANDIDATE1"
  else
    if [ -f "$DATADIR/translate-to-default-equivalent.xsl" ]; then
	    CANDIDATE2=`mktemp`
	    xsltproc  $DATADIR/translate-to-default-equivalent.xsl $DATADIR/apertium-$APERTIUMPAIR.$APERTIUMPAIR.dix > $CANDIDATE2
    else
        CANDIDATE2=$DATADIR/apertium-$APERTIUMPAIR.$APERTIUMPAIR.dix
    fi
	BILDIXMAKVAR="PAR_BILDIX=$CANDIDATE2"
  fi

if [ "${FLAGS_override_bin_bil_dir}" != "" ]; then
	BILDIXMAKVAR="$BILDIXMAKVAR PAR_OVERRIDE_BIL_L1_L2=${FLAGS_override_bin_bil_dir}"
fi

if [ "${FLAGS_override_bin_bil_inv}" != "" ]; then
	BILDIXMAKVAR="$BILDIXMAKVAR PAR_OVERRIDE_BIL_L2_L1=${FLAGS_override_bin_bil_inv}"
fi

#find monolingual .dix files
if [ "${FLAGS_override_mono_dix_l1}" != "" ]; then
	MONODIXL1=`readlink -f "${FLAGS_override_mono_dix_l1}"`
	if [ ! -f "$MONODIXL1" ]; then
		echo "Error: $SL monolingual dictionary $MONODIXL1 not found"
		exit 1
	fi
else
    if [ -f $DATADIR/.deps/$SL.dix ] ; then
    	MONODIXL1=$DATADIR/.deps/$SL.dix
    elif [ -f $DATADIR/apertium-$APERTIUMPAIR.$SL.dix ]; then
    	MONODIXL1=$DATADIR/apertium-$APERTIUMPAIR.$SL.dix
    elif [ -f $DATADIR/apertium-$APERTIUMPAIR.$SL.dix ]; then
    	MONODIXL1=$DATADIR/apertium-$APERTIUMPAIR.$SL.dixtmp1
    elif [ -f $DATADIR/.deps/apertium-hbs.hbs.dix  ]; then
    	MONODIXL1=$DATADIR/.deps/apertium-hbs.hbs.dix
    else
    	if [ "${FLAGS_alignments_with_bildic}" == "${FLAGS_TRUE}" ]; then
    		echo "Monolingual dictionary .dix file for $SL not found in Apertium data directory. Please disable --alignments_with_bildic flag or specify a .dix file with --override_mono_dix_l1"
    		exit 1
    	fi
    fi
fi

#find monolingual .dix files
if [ "${FLAGS_override_mono_dix_l2}" != "" ]; then
	MONODIXL2=`readlink -f "${FLAGS_override_mono_dix_l2}"`
	if [ ! -f "$MONODIXL2" ]; then
		echo "Error: $TL monolingual dictionary $MONODIXL2 not found"
		exit 1
	fi
else
    if [ "$MONODIXL2" == "" ]; then
    if [ -f $DATADIR/.deps/$TL.dix ] ; then
    	MONODIXL2=$DATADIR/.deps/$TL.dix
    elif [ -f $DATADIR/apertium-$APERTIUMPAIR.$TL.dix ]; then
    	MONODIXL2=$DATADIR/apertium-$APERTIUMPAIR.$TL.dix
    elif [ -f $DATADIR/apertium-$APERTIUMPAIR.$TL.dixtmp1 ]; then
    	MONODIXL2=$DATADIR/apertium-$APERTIUMPAIR.$TL.dixtmp1
    elif [ -f $DATADIR/.deps/apertium-hbs.hbs.dix  ]; then
    	MONODIXL2=$DATADIR/.deps/apertium-hbs.hbs.dix
    else
    	if [ "${FLAGS_alignments_with_bildic}" == "${FLAGS_TRUE}" ]; then
    		echo "Monolingual dictionary .dix file for $TL not found in Apertium data directory. Please disable --alignments_with_bildic flag or specify a .dix file with --override_mono_dix_l2"
    		exit 1
    	fi
    fi
fi
fi

MONODIXL1MAKVAR="PAR_MONODIXL1=$MONODIXL1"
MONODIXL2MAKVAR="PAR_MONODIXL2=$MONODIXL2"

TEST_CORPUS=${FLAGS_test_corpus}
DEV_CORPUS=${FLAGS_dev_corpus}

#Load Configuration file and write the different subfiles in the corresponding places.
mkdir -p $MYTMPDIR/config
CFGFILE="${FLAGS_config}"
if [ ! -f "$CFGFILE" ]; then
	echo "ERROR: configuration file $CFGFILE cannot be found" >&2
	exit 1
fi
cat "$CFGFILE" | sed '0,/\[tag groups\]/d' | sed '/^\[/q' | head -n -1 | grep -v '^#' > $MYTMPDIR/config/taggroups_${SL}-${TL}
cat "$CFGFILE" | sed '1,/\[tag sequences\]/d' | sed '/^\[/q' | head -n -1 |  grep -v '^#' > $MYTMPDIR/config/tagsequences_${SL}-${TL}

echo "#! __BASH__" > $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh
cat "$CFGFILE" | sed '1,/\[preprocess SL\]/d' | sed '/^\[/q' | head -n -1 | sed 's:^[ ]*$::' | grep -v '^$' |   grep -v '^#'  >> $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh
NUMLINES=`cat $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh | wc -l`
if [ $NUMLINES -le 1 ]; then
	echo "cat" >>  $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh
fi
chmod u+x $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh

echo "#! __BASH__" > $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh
cat "$CFGFILE" | sed '1,/\[preprocess TL\]/d' | sed '/^\[/q' | head -n -1 | sed 's:^[ ]*$::' | grep -v '^$' |  grep -v '^#' >> $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh
NUMLINES=`cat $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh | wc -l`
if [ $NUMLINES -le 1 ]; then
	echo "cat" >>  $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh
fi
chmod u+x $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh

cat "$CFGFILE" | sed '1,/\[markers\]/d' | sed '/^\[/q' | head -n -1 | tr ',' '\n' | grep -v '^$' | sed 's:^:<:' | sed 's:$:>:' |  grep -v '^#' > $MYTMPDIR/config/markers

cat "$CFGFILE" | sed '1,/\[post transfer\]/d' |  grep -v '^#'  |  __PYTHON__ $PYTHONLIBDIR/generatePostTransferXML.py > $MYTMPDIR/config/apertium-${SL}-${TL}.posttransfer.ptx


echo "Temporary directory: $MYTMPDIR" 1>&2


ALIGNMENTSHEADMAKVAR=""
if [ "${FLAGS_discard_a_fifth_of_corpus}" == "${FLAGS_TRUE}" ]; then
	CORPUSLENGTH=`cat $CORPUS.$SL | $HEADCOMMAND | wc -l`
	PORTIONTODISCARD=`expr $CORPUSLENGTH / 5`

	if [ $PORTIONTODISCARD -gt 2000 ]; then
		PORTIONTODISCARD=2000
	fi

	PORTIONTOKEEP=`expr $CORPUSLENGTH - $PORTIONTODISCARD`
	ALIGNMENTSHEADMAKVAR="PAR_ALIGNMENTS_HEAD=$PORTIONTOKEEP"
elif [ "${FLAGS_alignments_with_bildic}" == "${FLAGS_TRUE}"  ]; then
	CORPUSLENGTH=`cat $CORPUS.$SL | $HEADCOMMAND | wc -l`
	ALIGNMENTSHEADMAKVAR="PAR_ALIGNMENTS_HEAD=$CORPUSLENGTH"
fi



   RBPE_FLAG=""
   INTERNALTL=$TL
   #if [ "${FLAGS_rule_based_post_editing}" == "${FLAGS_TRUE}" ]; then
   #   INTERNALTL="${SL}_rbpe"
   #  RBPE_FLAG="-8"
   #fi

  MARKERFLAG=""
  #if [ ${FLAGS_segment_by_marker} == ${FLAGS_TRUE} ]; then
  #MARKERFLAG="PAR_BILPHRASES_MARKER_SOFT=yes"
  #fi

  NUMPARTS=`echo "${FLAGS_filtering_thresholds}" | wc -w`

  if [ "$NUMPARTS" == "1" ]; then
    THRESHOLD_START=${FLAGS_filtering_thresholds}
    THRESHOLD_STEP=1
    THRESHOLD_END=${FLAGS_filtering_thresholds}
  else
    THRESHOLD_START=`echo "${FLAGS_filtering_thresholds}" | cut -f 1 -d ' '`
    THRESHOLD_STEP=`echo "${FLAGS_filtering_thresholds}" | cut -f 2 -d ' '`
    THRESHOLD_END=`echo "${FLAGS_filtering_thresholds}" | cut -f 3 -d ' '`
  fi

  BILEXTRACTIONDIR=$MYTMPDIR/bilingualphrases
  MYFULLTMPDIR=`readlink -f $MYTMPDIR`

  if [ ! -e $BILEXTRACTIONDIR -o ! -f "$BILEXTRACTIONDIR/alignmentTemplatesPlusLemmas.withalllemmas.onlyslpos.filtered-1-count.$SL-$TL.gz" -o "${FLAGS_force_rerun}" == "${FLAGS_TRUE}" ]; then

  rm -Rf $BILEXTRACTIONDIR
  mkdir -p $BILEXTRACTIONDIR
  BILEXTRACTIONDIRFULL=`readlink -f $BILEXTRACTIONDIR`

  if [ "${FLAGS_force_rerun}" != "${FLAGS_TRUE}" ]; then

  pushd __LIBDIR__/transfer-tools-scripts
  __BASH__ linkToWorkDir.sh $BILEXTRACTIONDIRFULL
  popd

  #copy preprocess scriptsm,markers file and posttransfer rules
	cp $MYTMPDIR/config/preprocess_${SL}_${SL}-${TL}.sh $BILEXTRACTIONDIRFULL
	cp $MYTMPDIR/config/preprocess_${TL}_${SL}-${TL}.sh $BILEXTRACTIONDIRFULL
	cp $MYTMPDIR/config/markers $BILEXTRACTIONDIRFULL
  cp $MYTMPDIR/config/apertium-${SL}-${TL}.posttransfer.ptx $BILEXTRACTIONDIRFULL

  #get corpus
  if [ "${FLAGS_corpus_is_already_analysed}" == "${FLAGS_TRUE}" ]; then
    mkdir -p $BILEXTRACTIONDIR/train-giza++-${SL}-${INTERNALTL}
    mkdir -p $BILEXTRACTIONDIR/train-giza++-${INTERNALTL}-${SL}

    cat $CORPUS.$SL | $HEADCOMMAND  > $BILEXTRACTIONDIR/train-giza++-${SL}-${INTERNALTL}/$SL.${SL}-${INTERNALTL}.pos.txt
    cat $CORPUS.$INTERNALTL | $HEADCOMMAND  > $BILEXTRACTIONDIR/train-giza++-${SL}-${INTERNALTL}/$INTERNALTL.${SL}-${INTERNALTL}.pos.txt

    cat $CORPUS_INVERSE.$SL | $HEADCOMMAND  > $BILEXTRACTIONDIR/train-giza++-${INTERNALTL}-${SL}/$SL.${INTERNALTL}-${SL}.pos.txt
    cat $CORPUS_INVERSE.$INTERNALTL | $HEADCOMMAND  > $BILEXTRACTIONDIR/train-giza++-${INTERNALTL}-${SL}/$INTERNALTL.${INTERNALTL}-${SL}.pos.txt

    if [ "$PORTIONTODISCARD" != "" ]; then
	cat $DEV_CORPUS.$SL > $BILEXTRACTIONDIR/devcorpus.${FLAGS_corpus_head_size}.$SL
	cat $DEV_CORPUS.$INTERNALTL > $BILEXTRACTIONDIR/devcorpus.${FLAGS_corpus_head_size}.$INTERNALTL
    fi

  else
    cat $CORPUS.$SL | $HEADCOMMAND | gzip > $BILEXTRACTIONDIR/$SL.txt.gz
    cat $CORPUS.$INTERNALTL | $HEADCOMMAND | gzip > $BILEXTRACTIONDIR/$INTERNALTL.txt.gz

    if [ "$PORTIONTODISCARD" != "" ]; then
	zcat $BILEXTRACTIONDIR/$SL.txt.gz | tail -n $PORTIONTODISCARD > $BILEXTRACTIONDIR/devcorpus.${FLAGS_corpus_head_size}.$SL
	zcat $BILEXTRACTIONDIR/$INTERNALTL.txt.gz | tail -n $PORTIONTODISCARD > $BILEXTRACTIONDIR/devcorpus.${FLAGS_corpus_head_size}.$INTERNALTL
    fi
  fi

  fi

 mkdir -p $MYTMPDIR


  #run makefile to extract bilingual phrases
  pushd $BILEXTRACTIONDIR
	echo "Running bilingual phrase extraction ..."
  make -f Makefile-phrase-extract PAR_DONT_REMOVE_CONFLICTS=yes PAR_MAX=$MAX_LENGTH PAR_L1=$SL PAR_L2=$TL PAR_NO_SHORT_RESTRICTIONS=yes PAR_MY_EXTRACTING=yes $MARKERFLAG PAR_DATADIR="$DATADIR" PAR_RULELEARNINGLIBDIR="$PYTHONLIBDIR" PAR_GIZADIR="$GIZADIR" PAR_ENDS_ALIGNED="ENDSALIGNED"  $STRUCTMAKVAR $CORPUSANALYSEDMAKVAR PAR_VARIANT="$VARIANT"  PAR_EXTREMES_VARIANT="$EXTREMESVARIANT" PAR_PUNCTUATION_VARIANT="$PUNCTVARIANT" $ZENSMAKVAR $FIXEDDICTMAKVAR $LEMMATIZEDMAKVAR $ALIGNMENTSHEADMAKVAR $BILDIXMAKVAR $BILDIXFORALIGNMAKVAR $MONODIXL1MAKVAR $MONODIXL2MAKVAR PAR_INTERNALTL=$INTERNALTL  &> $MYFULLTMPDIR/bilingualphrases.log || {
		popd
    echo "Error in the extraction of bilingual phrases. Aborting. See the log at $MYTMPDIR/bilingualphrases.log for more information" >&2 ;
    exit 1;
}
  popd

  else

  echo "Bilingual phrase extraction directory already exists. Omitting bilingual phrase extraction." 1>&2

  fi

  if [ "${FLAGS_corpus_is_already_analysed}" != "${FLAGS_TRUE}" ]; then
  if [ "$PORTIONTODISCARD" != "" ]; then
  	DEV_CORPUS=$BILEXTRACTIONDIR/devcorpus.${FLAGS_corpus_head_size}
  fi
  fi

  #TODO: add first-step and last-step options like Moses
  #if [ "${FLAGS_only_extract_bilingual_phrases}" != "${FLAGS_TRUE}" ]; then


    #extract transfer rules from bilingual phrases

    #1. generate multiple alignment templates from each bilingual phrase
    if [ ! -e $MYTMPDIR/generalisation ]; then
			echo "Running generalisation of ATs ..."
    ruLearn-generateATs -v -6 -d $MYTMPDIR  -f $BILEXTRACTIONDIR/alignmentTemplatesPlusLemmas.withalllemmas.onlyslpos.filtered-1-count.${SL}-${INTERNALTL}.gz -i "." -x "_$PAIR" $ONLYLEXGENFLAG $RBPE_FLAG &> $MYTMPDIR/generalisation.log || {
	    echo "Error in the generalisation of ATs. Aborting. See the log at $MYTMPDIR/generalisation.log for more information" >&2 ;
	    exit 1;
	}
    else
    echo "AT generalisation direrctory already exists. Omitting AT generalisation." 1>&2
    fi

    FILTERING_NAME=proportion_correct_bilphrases_thresholdextendedrangerelaxdynamic1000above$THETA

    #2. minimise alignment templates
    if [ ! -e $MYTMPDIR/filtering-$FILTERING_NAME ]; then
			echo "Running minimisation of ATs ..."
    ruLearn-minimiseATs  -d $MYTMPDIR -i . -s $THRESHOLD_START -a $THRESHOLD_STEP -b $THRESHOLD_END -o $FILTERING_NAME -x "_$PAIR" -n &> $MYTMPDIR/minimisation.log || {
	    echo "Error in the minimisation of ATs. Aborting. See the log at $MYTMPDIR/minimisation.log for more information" >&2 ;
	    exit 1;
	}
    else
    echo "AT minimisation directory already exists. Omitting AT minimisation." 1>&2
    fi

    SOURCESDIR=`echo "$DATADIR" | sed 's,/*[^/]\+/*$,,'`
    PAIROFDATADIR=`basename $DATADIR | sed 's:^apertium-::'`

    APERTIUMPREFIXDATADIR="$APERTIUMPREFIX/share/apertium"

    #3. select the best sequences of lexical catgeories
    #first, create mode

    if [ "${FLAGS_rule_based_post_editing}" == "${FLAGS_TRUE}" ]; then
    	__BASH__ __LIBDIR__/createModeForBeamSearchEvaluation.sh  $APERTIUMPREFIXDATADIR/modes/${TL}-$SL.mode "" $MYFULLTMPDIR/config/apertium-${TL}-${SL}.posttransfer.ptx > $APERTIUMPREFIXDATADIR/modes/${SL}_lex_from_beam-${SL}.mode
    else
    	__BASH__ __LIBDIR__/createModeForBeamSearchEvaluation.sh  $APERTIUMPREFIXDATADIR/modes/${SL}-$TL.mode "" $MYFULLTMPDIR/config/apertium-${PAIR}.posttransfer.ptx > $APERTIUMPREFIXDATADIR/modes/${TL}_lex_from_beam-${TL}.mode
    fi

    if  [ ! -e $MYTMPDIR/beamsearch-$FILTERING_NAME ]; then
    mkdir -p $MYTMPDIR/beamsearch-$FILTERING_NAME

    #split sentences for parallelising beam search
    SENTENCES_FILE=$MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz
     if [ "${FLAGS_max_beam_search_corpus_size}" != "" ]; then
     	zcat $SENTENCES_FILE | head -n ${FLAGS_max_beam_search_corpus_size} | gzip > $MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz.head
     	SENTENCES_FILE=$MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz.head
     fi

    PART_TOTAL=60
		NUM_SENTENCES=`zcat $SENTENCES_FILE | wc -l`
		if [ $NUM_SENTENCES -lt $PART_TOTAL ]; then
			PART_TOTAL=$NUM_SENTENCES
		fi

    for PART_NUM in `seq $PART_TOTAL`; do
    	PART="$PART_NUM-$PART_TOTAL"
    	LOCAL_SENTENCES_FILE=$MYTMPDIR/beamsearch-$FILTERING_NAME/sentences.$PART.gz
	COMPARISONNUMBER=`expr $PART_NUM % $PART_TOTAL`
	NUMLINE=0
	rm -f ${LOCAL_SENTENCES_FILE%.gz} ${LOCAL_SENTENCES_FILE}
	zcat $SENTENCES_FILE | while read line ; do
	  NUMLINE=`expr $NUMLINE + 1`
	  RESULTREMAINDER=`expr $NUMLINE % $PART_TOTAL`
	  if [ "$RESULTREMAINDER" == "$COMPARISONNUMBER" ]; then
	    echo "$line" >> ${LOCAL_SENTENCES_FILE%.gz}
	  fi
	done
	gzip ${LOCAL_SENTENCES_FILE%.gz}
    done

    echo "Running computation of the best rule coverage on training set ..."
    #do beam search
    for THRESHOLD in `__PYTHON__ $PYTHONLIBDIR/seq.py $THRESHOLD_START  $THRESHOLD_STEP $THRESHOLD_END` ; do
    	#__BASH__ $CURDIR/rule-generalisation/beamSearch.sh --target_language ${INTERNALTL%_rbpe} --tag_groups_seqs_suffix "_$PAIR" --ats_filtering_dir $MYTMPDIR/filtering-$FILTERING_NAME/ats/ --dir $MYTMPDIR/beamsearch-$FILTERING_NAME/ --sentences $MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz  --ats_suffix "-f-$THRESHOLD.result.gz"  --apertium_data_dir $APERTIUMPREFIXDATADIR --final_boxes_index  $MYTMPDIR/generalisation/finalboxesindex
    	#__BASH__ $CURDIR/rule-generalisation/beamSearch.sh --target_language ${INTERNALTL%_rbpe} --tag_groups_seqs_suffix "_$PAIR" --ats_filtering_dir $MYTMPDIR/filtering-$FILTERING_NAME/ats/ --dir $MYTMPDIR/beamsearch-$FILTERING_NAME/ --sentences $MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz  --ats_suffix "-f-$THRESHOLD.result.gz"  --apertium_data_dir $APERTIUMPREFIXDATADIR --final_boxes_index  $MYTMPDIR/generalisation/finalboxesindex

    	parallel -i  __BASH__ -c "rm -f $MYTMPDIR/beamsearch-dead-$THRESHOLD-{} ; ruLearn-beamSearch --target_language ${INTERNALTL%_rbpe} --tag_groups_seqs_suffix "_$PAIR" --ats_filtering_dir $MYTMPDIR/filtering-$FILTERING_NAME/ats/ --dir $MYTMPDIR/beamsearch-$FILTERING_NAME/ --sentences $MYTMPDIR/beamsearch-$FILTERING_NAME/sentences.{}-$PART_TOTAL.gz  --ats_suffix "-f-$THRESHOLD.result.gz"  --apertium_data_dir $APERTIUMPREFIXDATADIR --final_boxes_index  $MYTMPDIR/generalisation/finalboxesindex  --result_infix -{}-$PART_TOTAL $RBPE_FLAG $ONLYLEXGENFLAG &> $MYTMPDIR/beamsearch-$THRESHOLD-{}.log || { touch $MYTMPDIR/beamsearch-dead-$THRESHOLD-{}; }" -- `seq $PART_TOTAL`
    done

	  NUMERRORS=`find $MYTMPDIR -name 'beamsearch-dead-*' | wc -l`
		if [ "$NUMERRORS" != "0" ]; then
			  echo "Error in the computation of the best rule coverage. Aborting. See the following log files for more information:" >&2
				find $MYTMPDIR -name 'beamsearch-dead-*' | egrep -o -- '-[0-9]+$' | cut -f 2 -d '-' | while read NUM ; do
					echo "$MYTMPDIR/beamsearch-$THRESHOLD-$NUM.log" >&2
				done
				exit 1
	  fi

    else
    echo "Best rule coverages directory already exists. Omitting computation of best rule coverages." 1>&2
    fi

    if  [ ! -e $MYTMPDIR/maximise-score-$FILTERING_NAME ]; then
    #select categories
		echo "Running selection of lexical categories ..."

    cp $MYTMPDIR/bilingualphrases/alignments.${SL}-${INTERNALTL}.gz.toBeam.gz $MYTMPDIR/beamsearch-$FILTERING_NAME/sentences.gz
    for THRESHOLD in `__PYTHON__ $PYTHONLIBDIR/seq.py $THRESHOLD_START $THRESHOLD_STEP $THRESHOLD_END` ; do

    	 ruLearn-selectRulesMaximiseScore --target_language ${INTERNALTL%_rbpe} --beam_search_dir $MYTMPDIR/beamsearch-$FILTERING_NAME  --dir $MYTMPDIR/maximise-score-$FILTERING_NAME --ats_suffix "-f-$THRESHOLD.result.gz"  --beam "yes" --final_boxes_index $MYTMPDIR/generalisation/finalboxesindex  --tag_groups_seqs_suffix "_$PAIR" --apertium_data_dir $APERTIUMPREFIXDATADIR $RBPE_FLAG $ONLYLEXGENFLAG &> $MYTMPDIR/category-selection-$THRESHOLD.log || {
	 	    echo "Error in the selection of lexical categories. Aborting. See the log at $MYTMPDIR/category-selection-$THRESHOLD.log" >&2 ;
	 	    exit 1;
	 	}
    done
    else
     echo "Selection of lexical categories directory already exists. Omitting lexical category selection." 1>&2
    fi

    #4. convert alignment templates to Apertium rules and test them
    if [ "$PAIROFDATADIR" == "$PAIR" ]; then
    INVERSE_PAIR_TUNING_FLAG=""
    else
    INVERSE_PAIR_TUNING_FLAG="-i"
    fi

    if [ ! -e $MYTMPDIR/tuning-$FILTERING_NAME-${THRESHOLD_START}-${THRESHOLD_STEP}-${THRESHOLD_END}-subrules/summary ]; then
			echo "Running rule redundancy removal and evaluation ..."
     ruLearn-generateApertiumFormat  -f $SOURCESDIR -p $APERTIUMPREFIX -s $SL -t $TL  -d $MYTMPDIR -c "$DEV_CORPUS" -e "$TEST_CORPUS" -r $THRESHOLD_START -a $THRESHOLD_STEP -b $THRESHOLD_END -o $FILTERING_NAME -x "_$PAIR" -z $INVERSE_PAIR_TUNING_FLAG -l -v $RBPE_FLAG  &> $MYTMPDIR/tuning.log || {
			echo "Error in rule redundancy removal and evaluation. Aborting. See the log at $MYTMPDIR/tuning.log" >&2 ;
			exit 1;
	}
            ln -s  `readlink -f "$MYTMPDIR/tuning-$FILTERING_NAME-${THRESHOLD_START}-${THRESHOLD_STEP}-${THRESHOLD_END}-subrules/rules.result.xml"` $MYTMPDIR/rules.result.xml

		cat $MYTMPDIR/tuning-$FILTERING_NAME-${THRESHOLD_START}-${THRESHOLD_STEP}-${THRESHOLD_END}-subrules/summary
		echo "Rules can be found at: $MYTMPDIR/tuning-$FILTERING_NAME-${THRESHOLD_START}-${THRESHOLD_STEP}-${THRESHOLD_END}-subrules/rules.result.xml"
    else
    echo "Rule redundancy removal, tuning and testing directory already exists. Omitting rule redundancy removal, tuning and testing." 1>&2
    fi
 #fi


if [ "$CANDIDATE2" != "" ]; then
	rm "$CANDIDATE2"
fi
