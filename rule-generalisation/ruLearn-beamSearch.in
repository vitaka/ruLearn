#! __BASH__
#
# Copyright 2009-2016 Víctor M. Sánchez-Cartagena, Felipe Sánchez-Martínez, Universitat d'Alacant
#
# This file is part of ruLearn.
# ruLearn is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# ruLearn is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with ruLearn.  If not, see <http://www.gnu.org/licenses/>.
#

set -o pipefail

MYFULLPATH=`readlink -f $0`
CURDIR=`dirname "$MYFULLPATH"`

PYTHONLIBDIR=__PYTHONLIBDIR__

#two modes of getting the ATs:
# ats_file: compressed file containing all the ats
# ats_dir: dir where the ats are found

#generates:

# $dir/scores${FLAGS_result_infix}${FLAGS_ats_suffix}
#
# infix is usually "-$PART" and suffix is usually "-f-$THRESHOLD.result.gz"
#

#shflags
. __LIBDIR__/shflags

DEFINE_string 'target_language' 'ca' 'target language' 't'
DEFINE_string 'ats_file' '' 'file containing the alignment templates' 'f'
DEFINE_string 'ats_filtering_dir' '' 'directory where the ats are' 'a'
DEFINE_string 'alternative_ats_filtering_dir' '' 'directory where the ats are' 'm'
DEFINE_string 'ats_suffix' '' 'at file suffix' 'x'
DEFINE_string 'dir' '' 'directory where the new files and dirs will be created' 'd'
DEFINE_string 'sentences' '' 'file contining the sentences to be evaluated' 's'
DEFINE_string 'tag_groups_seqs_suffix' '' 'file containing the sentences to be evaluated' 'g'
DEFINE_string 'result_infix' '' 'string added in the middle of the result filename' 'i'
#No longer needed
#DEFINE_string 'python_home' '' 'dir of python interpreter' 'p'
DEFINE_string 'apertium_data_dir' '' 'dir of python interpreter' 'u'
DEFINE_string 'final_boxes_index' 'NONE' 'Boxes index' 'n'
DEFINE_boolean 'debug' 'false' 'Debug information' 'b'
DEFINE_boolean 'rbpe' false 'Do rbpe' '8'
DEFINE_boolean 'only_lexical' false 'Only lexical generalisation: group boxes' '7'

FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

echo "ATS suffix: ${FLAGS_ats_suffix}" 1>&2

DEBUG_FLAG=""

if [ "${FLAGS_debug}" == "${FLAGS_TRUE}" ]; then
 DEBUG_FLAG="--debug"
fi

RBPE_FLAG=""
if [ "${FLAGS_rbpe}" == "${FLAGS_TRUE}" ]; then
  RBPE_FLAG="--rbpe"
fi

FULWORKDIR=`readlink -f "${FLAGS_dir}"`
CONFIGDIR="$FULWORKDIR/../config"

#get ATs
if [ "${FLAGS_ats_file}" != "" ]; then
	ATS_FILE=${FLAGS_ats_file}
else
	ATS_FILE=$FULWORKDIR/ats${FLAGS_result_infix}${FLAGS_ats_suffix}
	rm -f ${ATS_FILE%.gz}
	NUMBERS=`ls  ${FLAGS_ats_filtering_dir} | awk -F"-" '{print $1}' | awk -F"." '{print $1}'  | LC_ALL=C sort | uniq`
	for number in $NUMBERS; do
		zcat "${FLAGS_ats_filtering_dir}${number}${FLAGS_ats_suffix}" >> ${ATS_FILE%.gz}
	done
	gzip ${ATS_FILE%.gz}

	if [ "${FLAGS_alternative_ats_filtering_dir}" != "" ]; then
		ALTATSSUFFIX="-alt1"
		ALT_ATS_FILE="$FULWORKDIR/ats${FLAGS_result_infix}$ALTATSSUFFIX${FLAGS_ats_suffix}"
		ALT_ATS_FLAG="--alternative_alignment_templates $ALT_ATS_FILE"
		rm -f ${ALT_ATS_FILE%.gz}
		NUMBERS=`ls  ${FLAGS_alternative_ats_filtering_dir} | awk -F"-" '{print $1}' | awk -F"." '{print $1}'  | LC_ALL=C sort | uniq`
		for number in $NUMBERS; do
			zcat "${FLAGS_alternative_ats_filtering_dir}${number}${FLAGS_ats_suffix}" >> ${ALT_ATS_FILE%.gz}
		done
		gzip ${ALT_ATS_FILE%.gz}
	fi
fi

if [ "${FLAGS_only_lexical}" == "${FLAGS_TRUE}" ]; then
#if we are doing only lexical generalisation, map boxes indexes to new ones that account only for the sequence of lexical categories

cat ${FLAGS_final_boxes_index} | __PYTHON__ $PYTHONLIBDIR/addStandardBoxDescToOnlyLexical.py > $FULWORKDIR/finalboxesindex.plusstd
cut -f 3 $FULWORKDIR/finalboxesindex.plusstd | LC_ALL=C sort | LC_ALL=C uniq | awk '{printf "%d\t%s\n", NR, $0}' > $FULWORKDIR/stdfinalboxesindex
LC_ALL=C sort -t'	' -k3,3 $FULWORKDIR/finalboxesindex.plusstd | join -t'	' -1 3 -2 2 - $FULWORKDIR/stdfinalboxesindex | awk -F'\t' '{ print $2 "\t"  $4 }' > $FULWORKDIR/mappingsfinalboxestostdfinalboxes

BOXESFLAG="--final_boxes_index  $FULWORKDIR/stdfinalboxesindex --minimum_covered_words --allow_incompatible_rules"
BOXESFLAGSEC="--final_boxes_index  $FULWORKDIR/stdfinalboxesindex"

else

BOXESFLAG=""
BOXESFLAGSEC=""
if [ "${FLAGS_final_boxes_index}" != "NONE" ] ; then
  BOXESFLAG="--final_boxes_index `readlink -f ${FLAGS_final_boxes_index}` --minimum_covered_words --allow_incompatible_rules"
  BOXESFLAGSEC="--final_boxes_index `readlink -f ${FLAGS_final_boxes_index}`"
fi

fi


FULLSENTENCES=`readlink -f "${FLAGS_sentences}"`

#change to source code dir to allow python to find script
pushd $PYTHONLIBDIR

zcat "$FULLSENTENCES" | __PYTHON__ $PYTHONLIBDIR/beamSearch.py --target_language ${FLAGS_target_language} --alignment_templates $ATS_FILE $ALT_ATS_FLAG --tag_groups_file_name $CONFIGDIR/taggroups${FLAGS_tag_groups_seqs_suffix} --tag_sequences_file_name $CONFIGDIR/tagsequences${FLAGS_tag_groups_seqs_suffix} --apertium_data_dir "${FLAGS_apertium_data_dir}" $BOXESFLAG $DEBUG_FLAG --beam_size 2000 $RBPE_FLAG 2> $FULWORKDIR/scores${FLAGS_result_infix}${FLAGS_ats_suffix}-debug | awk -F"[|][|][|]"  '{ print $1; }' | gzip > $FULWORKDIR/scores${FLAGS_result_infix}${FLAGS_ats_suffix}

if [ "$?" != "0" ]; then
	echo "Error in the computation of the best rule coverage: " >&2
	cat $FULWORKDIR/scores${FLAGS_result_infix}${FLAGS_ats_suffix}-debug >&2
	exit 1
fi

if [ "$ALT_ATS_FILE" == "" ]; then
	zcat $FULWORKDIR/scores${FLAGS_result_infix}${FLAGS_ats_suffix} | __PYTHON__ $PYTHONLIBDIR/computeSupersetsOfKeySegments.py --tag_groups_file_name $CONFIGDIR/taggroups${FLAGS_tag_groups_seqs_suffix} --tag_sequences_file_name $CONFIGDIR/tagsequences${FLAGS_tag_groups_seqs_suffix} $BOXESFLAGSEC --alignment_templates $ATS_FILE --sentences "$FULLSENTENCES" --target_language ${FLAGS_target_language} --apertium_data_dir "${FLAGS_apertium_data_dir}" $RBPE_FLAG 2>$FULWORKDIR/supersegments${FLAGS_result_infix}${FLAGS_ats_suffix}.debug | gzip  > $FULWORKDIR/supersegments${FLAGS_result_infix}${FLAGS_ats_suffix}

	if [ "$?" != "0" ]; then
		echo "Error in the computation of the best rule coverage: " >&2
		cat $FULWORKDIR/supersegments${FLAGS_result_infix}${FLAGS_ats_suffix}.debug >&2
		exit 1
	fi

fi

popd

if [ "${FLAGS_ats_file}" == "" ]; then
	cp $FULWORKDIR/ats${FLAGS_result_infix}${FLAGS_ats_suffix} $FULWORKDIR/ats${FLAGS_ats_suffix}
fi
